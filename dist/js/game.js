// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Game = (function() {
    function Game(initialData) {
      var g, newP, player, _i, _len, _ref;

      if (initialData == null) {
        initialData = {};
      }
      this.playerIndex = __bind(this.playerIndex, this);
      this.getPlayer = __bind(this.getPlayer, this);
      this.dropPlayer = __bind(this.dropPlayer, this);
      this.addPlayer = __bind(this.addPlayer, this);
      this.syncTo = __bind(this.syncTo, this);
      this.isKeyDown = __bind(this.isKeyDown, this);
      this.keyUp = __bind(this.keyUp, this);
      this.keyDown = __bind(this.keyDown, this);
      this.update = __bind(this.update, this);
      g = typeof exports !== "undefined" && exports !== null ? global : window;
      g.UP = 0;
      g.RIGHT = 1;
      g.DOWN = 2;
      g.LEFT = 3;
      g.GAME_WIDTH = 600;
      g.GAME_HEIGHT = 600;
      this.ticks = initialData.ticks || 0;
      this.keys = initialData.keys || {};
      this.players = [];
      _ref = initialData.players || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        newP = new Player();
        newP.syncTo(player);
        this.players.push(newP);
      }
      setInterval(this.update, 16);
      this;
    }

    Game.prototype.update = function() {
      var del, player, startTime, _i, _len, _ref;

      startTime = Date.now();
      this.ticks++;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.update(this);
      }
      del = Date.now() - startTime;
      if (del > 15) {
        return console.log("slow tick: " + this.ticks);
      }
    };

    Game.prototype.keyDown = function(playerId, keyCode) {
      return this.getPlayer(playerId).keyDown(keyCode);
    };

    Game.prototype.keyUp = function(playerId, keyCode) {
      if (keyCode === 68) {
        if (typeof this.cheat === "function") {
          this.cheat();
        }
      }
      return this.getPlayer(playerId).keyUp(keyCode);
    };

    Game.prototype.isKeyDown = function(playerId, keyCode) {
      var _ref, _ref1;

      return ((_ref = this.getPlayer(playerId)) != null ? (_ref1 = _ref.keys) != null ? _ref1[keyCode] : void 0 : void 0) || false;
    };

    Game.prototype.syncTo = function(otherGame) {};

    Game.prototype.addPlayer = function(player) {
      this.players.push(player);
      this.keys[player.id] = {};
      return player;
    };

    Game.prototype.dropPlayer = function(id) {
      var index;

      index = this.playerIndex(id);
      if (index !== -1) {
        this.players.splice(index, 1);
      }
      return index;
    };

    Game.prototype.getPlayer = function(id) {
      var index;

      index = this.playerIndex(id);
      if (index === -1) {
        return null;
      } else {
        return this.players[index];
      }
    };

    Game.prototype.playerIndex = function(id) {
      var index;

      index = this.players.findIndex(function(p) {
        return p.id === id;
      });
      return index;
    };

    return Game;

  })();

  if ((typeof exports !== "undefined" && exports !== null)) {
    exports.Game = this.Game;
  }

}).call(this);
